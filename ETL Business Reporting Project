echo "# DataEngineering_projects" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/datash0ck/DataEngineering_projects.git
git push -u origin main

--Business Report: Film Monthly Revenue and Total Rentals Report
--This business report is for providing a large-scale insight from a monthly and yearly perspective to show a performance summary for total rentals and revenue that will be refreshed on a monthly basis to track trends for stakeholders and to be used for data analysis.
--The data being used in this ETL process is from the DVD Rental database using the pgAdmin management tool with PostgreSQL.
--There are 15 tables in the dataset and I will be using 2 of them; the payment table and the rental table.
--Custom Function Purpose: I changed the rental_date column in the rental table from a standard DATE format to TEXT data type to show the month and year to reflect the total rentals and revenue by month for ease of business purpose analysis.
 
--Detailed Table View:
--rental_id	INT
--rental_date	DATE
--customer_id	INT
--amount	DECIMAL(6,2)

--Summary Table View:
--month	INT PRIMARY KEY
--total_rentals	INT
--total_revenue	DECIMAL(8,2)
 
--Code to Create Detailed and Summary Tables
 
--detailed table creation
CREATE TABLE detailed_table(
    rental_id INT,
    customer_id INT,
    rental_date DATE,
    amount DECIMAL(6,2));
 
--summary table creation
CREATE TABLE summary_table(
    month INT PRIMARY KEY,
    total_rentals INT
    total_revenue DECIMAL(8,2));
 
--Custom Function Code
 
--create function for tranforming rental_date format from DATE to TEXT to show the month and year for monthly reports E.g., 'July 2023'
CREATE OR REPLACE FUNCTION format_rental_month(rental_date DATE) 
   RETURNS TEXT 
   AS 
$$
BEGIN
    RETURN TO_CHAR(rental_date, 'Month YYYY');   
END;
$$ LANGUAGE plpgsql;
 
--Query to Extract Data for Detailed Table
 
--query and left join payment table to rental table to extract data for detailed_table
INSERT INTO detailed_table (rental_id, customer_id, rental_date, amount)
SELECT 
    r.rental_id,
    r.customer_id,
    format_rental_month(r.rental_date::DATE) AS rental_date,
    p.amount
FROM 
    rental r
JOIN 
    payment p ON r.rental_id = p.rental_id;
 
--Code to Create a Function and Trigger for Updating Summary Table
 
--create the trigger function
CREATE OR REPLACE FUNCTION update_summary_table() 
   RETURNS trigger 
   AS 
$$
BEGIN
    UPDATE summary_table
    SET total_rentals = total_rentals + 1,
           total_revenue = total_revenue + NEW.amount
    WHERE month = NEW.rental_date; 
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
;
--Creating the trigger
CREATE TRIGGER trigger_update_summary
AFTER INSERT ON detailed_table
   FOR EACH ROW
EXECUTE FUNCTION update_summary_table();
 
--Code for Stored Procedure to Refresh Data
 
--create a stored procedure to refresh data on monthly basis for business reporting
CREATE OR REPLACE PROCEDURE refresh_data()
   AS 
$$
BEGIN
    TRUNCATE detailed_table, summary_table
    RESTART IDENTITY;
        INSERT INTO detailed_table (rental_id, customer_id, rental_date, amount)
    SELECT 
        rental_id,
        customer_id,
        rental_date,
        amount
    FROM 
        rental
    JOIN 
        payment ON rental.rental_id = payment.rental_id;
 
    --add the data for the summary_table
    INSERT INTO summary_table (month, total_rentals, total_revenue)
    SELECT 
        EXTRACT(MONTH FROM rental_date) AS month,
        COUNT(*) AS total_rentals,
        SUM(amount) AS total_revenue
    FROM 
        detailed_table
    GROUP BY 
        EXTRACT(MONTH FROM rental_date);
END;
$$ LANGUAGE plpgsql;
  
--Job Scheduling Tool
--Tool: pg_cron
--Usage: will be used to schedule and refresh the data using the refresh_data() procedure command to be ran monthly basis.
